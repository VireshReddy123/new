package test;

import org.automation.base.BaseTest;
import org.automation.pageObjects.admin.SetUpAddNewBucket;
import org.automation.pageObjects.ratePlans.*;
import org.automation.utilities.RandomGenerator;
import org.testng.annotations.Test;

public class ElecPlanManagementTest extends BaseTest {

    RatePlanPage plan = new RatePlanPage();
    AddTarifPlan tarifPlan = new AddTarifPlan();
    AddMonthlyTarif monthlyTarif = new AddMonthlyTarif();
    AddTarifConnectionFee connectionFee = new AddTarifConnectionFee();
    AddCommercialPlan commercialPlan = new AddCommercialPlan();
    AddMonthlyPlan monthlyPlan = new AddMonthlyPlan();
    EditRatePlan_WithAllocaionBucket editAllocation = new EditRatePlan_WithAllocaionBucket();
    Add_AllocationBucket_inPlansTariff addAllocation = new Add_AllocationBucket_inPlansTariff();
    Autogenrate_Four_plans autoGenerated = new Autogenrate_Four_plans();
    String allocationBucket;
    @Test(priority = 0,enabled = true, description = "Create Plan")
    public void createBucket() throws InterruptedException {
        RandomGenerator randomGenerator = new RandomGenerator();
        SetUpAddNewBucket newBucket = new SetUpAddNewBucket();

         allocationBucket = "New Bucket" + randomGenerator.requiredDigits(3);
        newBucket.setUpBucket(allocationBucket);    }
    @Test(priority = 1,enabled = true, description = "Create Plan")
    public void createPlan() throws InterruptedException {
        plan.createPlan("testing002", "Retail Electricity", "Adam Johhns", "Usage Charge", "None8969", "Water Charges", 5, "Usage Peak",2, "65");
    }

    @Test(priority = 2,enabled = true, description = "Add Tarif")
    public void addTarif() throws InterruptedException {
        tarifPlan.addTarif("Usage Charge", "None", "Electricity Charges",5, "Usage Peak",2, "65");
    }

    @Test(priority = 3, enabled = true,description = "Add Monthly Tarif")
    public void addMonthlyTarif() throws InterruptedException {
        monthlyTarif.addMonthlyTarif("monthly administration fee", "None", "Electricity Charges", 4, "Usage Tiered Monthly", 2, "No Tax", "10", "100", "1000");
    }

    @Test(priority = 4, enabled = true, description = "Add Tarif Connection Fee")
    public void addTarifConnectionFee() throws InterruptedException {
        connectionFee.addTarifConnection("Connection Fee", "None", "Account Level Charges",3, "Rebate",1, "60", "No Tax");
    }

    @Test(priority = 5, enabled = true, description = "Create Commercial Plan")
    public void addCommercialPlan() throws InterruptedException {
        commercialPlan.createCommercialPlan("testing002", "Retail Electricity", "Adams Johhons", "Usage Commerical", "None", "Electricity Charges",3 , "Usage Peak", "Kilowatt (kW)", "65");
    }

    @Test(priority = 6, enabled = true, description = "Add Monthly Plan")
    public void addMonthlyPlan() throws InterruptedException {
        monthlyPlan.addMonthlyPlan("monthly administration fee", "None", "Electricity Charges", 3, "Usage Tiered Monthly", "Kilowatt (kW)", "No Tax", "20", "100", "1000");
    }

    @Test(priority = 7, enabled = true, description = "Edit Allocation Bucket in Plans Tariff")
    public void editAllocationBucket() throws InterruptedException {
        editAllocation.edit_Allocation("Commercial Plan", allocationBucket, "50");
    }

    @Test(priority = 8,enabled = true, description = "Add Allocation Bucket in Plans Tariff")
    public void addAllocationBucket() throws InterruptedException {
        addAllocation.add_Allocation("Commercial Plan", "Electric Discount", "None", allocationBucket, "Electricity Charges", "Usage Flat Rate", "Kilowatt (KW)", "10");
    }

    @Test(priority = 9,enabled = true, description = "Autogenrate_Four_plans")
    public void autoGeneratePlans() throws InterruptedException {
        autoGenerated.auto_Generate("autogenerated", "Gas Flat Template Plan", "Retail Electricity", "Water Residential plan(Flat)");
    }
}
